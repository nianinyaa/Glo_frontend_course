Урок 19. Скрипты и время выполнения setTimeout, setInterval и requestAnimationFrame

setTimeout

const logger = (str) => {
  console.log(`Привет, я ${str}"`);
};
setTimeout(() => {
  logger("setTimeout");
}, 2000); // нужна функция-обертка,
//!! в метод setTimeout надо передавать функцию без ее вызова, за ее вызов отвечает сам setTimeout


setInterval

const logger = (str) => {
  console.log(`Привет, я ${str}"`);
};
setInterval(() => {
  logger("setInterval");
}, 3000);// это интервал, буде отрабатывать через каждые 3 сек    


МЕТОДЫ ОСТАНОВКИ setTimeout и setInterval
  
clearTimeout
передается идентификатор конкретного setTimeout
Как его определить? В коде может быть много setTimeout, но у каждого есть идентификатор. Как его вычислить? - let idSetTimeout

let idTimeout = setTimeout(() => {
  logger("setInterval");
}, 3000);

clearTimeout(idTimeout)


clear  Interval
то же самое что и выше

let idInterval = setInterval(() => {
  logger("setInterval");
}, 3000);

clearInterval(idInterval)



МОЖНО НА КАКОМ-ТО ЭТАПЕ ЗАКОНЧИТЬ ДЕЙСТВИЕ setInterval

Например, с помощью счетчика

let count = 0;
let idTimeout; // объявление функции перенесли снаружи - внутри функции будем ее только ПЕРЕопределять 

let idInterval = setInterval(() => {
    count++
  logger("setInterval");

if(count === 10)
    clearInterval(idInterval)
}, 500);


 ФИШКА С clearTimeout

 let count = 0;
let idTimeout; 
const logger = (str) => {
  console.log(`Привет, я ${str}"`);

idTimeout = setTimeout(() => {
  logger("setTimeout");
}, 500); // перенесли setTimeout внутрь функции logger 
  
}; 

logger('setTimeout) // выше применен метод рекурсии: вызывает 1 раз функцию logger, а затем функция setTimeout через каждые 500 мс вызывает logger

//clearTimeout(idTimeout)


ВКЛЮЧЕНИЕ/ВЫКЛЮЧЕНИЕ 

Логика: 
logger проверяет значение active. Если оно станет равным false, то очищаем таймаут, функция setTimeout больше не запустится 
    
НИЖЕ ПРИМЕР ТОЛЬКО ВЫКЛЧЕНИЯ
let active = true ;
let idTimeout;

document.addEventListener('click', () => {
     active = false  
})

const logger = (str) => {
  console.log(`Привет, я ${str}"`);

if(active){
    idTimeout = setTimeout(() => {
        logger('setTimeout');
    }, 500)
} else {
    clearTimeout
}
}; 

logger('setTimeout)

НИЖЕ ПРИМЕР ВЫКЛЮЧЕНИЯ + ВКЛЮЧЕНИЯ(новый код вверху)

let active = true ;
let idTimeout;

document.addEventListener('click', () => {
    if(active == false){
    } else{
        active = true
    }// эту проверку и переопределение можно записать одной строкой active =!active 


    logger('setTimeout') 
})

const logger = (str) =>{
if(active){
    console.log(`Привет, я ${str}"`);
    idTimeout = setTimeout(() => {
        logger('setTimeout');
    }, 500)
} else {
    clearTimeout(idTimeout)
}
}


requestAnimationFrame  
учитывает пропуск кадра, который присуствует при обновлении css стилей в setTimeout и setInterval(получается дергано)
в анимации лучше использовать этот метод
плавно анимирует анимацию любой сложности 

Пример с человечком и самолетом из урока 

const man = document.querySelector('.man')
const airplane = document.querySelector('.airplane')

let count 

let idInterval

const flyAnimate = ()=>{
    count++

    idInterval = requestAnimationFrame(flyAnimate)

    if(count<200){
        man.style.top = count + 'px'
        airplane.style.left = count * 5 + 'px'
        }
        else if(count<500){
            airplane.style.left = count * 5 + 'px'
        }
        else{
            cancelAnimationFrame(idInterval)
        }
}

flyAnimate( )



ОБЪЕКТ Date

Порядок задания времени:
!!передается функцией-конструктором


По убыванию
Год, месяц(месяца передаются массивом, поэтому нужно конкретное число из массива), день месяца, час, минуты, секунды - милисекунды уже не считает

Пример: 22 октября 1987 03:10:02:200

let date = new Date(1987, 9, 22, 03, 10, 02, 200)
console.log(Date)

МЕТОДЫ ПОЛУЧЕНИЯ ВРЕМЕНИ 

console.log('Год' + date.getFullYear());
console.log('Месяц' + (date.getMonth()+1)); // т к по массиву октябрь = 9 месяц, а в жизни 10 
console.log('Число месяца' + date.getDate());
console.log('Число недели' + date.getDay());

console.log('Часы' + date.getHours());
console.log('Минуты' + date.getMinutes());
console.log('Секунды' + date.getSeconds());
console.log('Милисекунды' + date.getMilliseconds());

Возвращают значения с учетом текущего часового пояса 

Если хотим по Гринвичу, то перед каждым параметром ставим UTC 

console.log('Часы' + date.getUTC Hours());


УКАЗАНИЕ ВРЕМЕНИ

то же самое, только set 

date.setFullYear(1987) - сюда же можно добавить индекс месяца и число 

date.setFullYear(1987, 9, 22) 
date.setMonth(9, 22) 
date.setDate(22) - передаем только 1 аргумент 

date.setHours(3, 22, 22, 200) - часы, минуты, секунды, милисекунды
date.setMinutes(22, 22, 200) - минуты, секунды, милисекунды
date.setSeconds(22, 200) - секунды, милисекунды
date.setMilliseconds(22, 200) -милисекунды

Можем передать любые параметры, кроме дней недели    

ПЕРЕСЧЕТ ДАТЫ 

setDate  
Пересчитывает месяц относительно переданных дней 

date.setDate(45) - выведет Ноябрь, хотя нам нужен октябрь

Перекидывает оставшиеся дни/часы и тд на другие и выводит правильную, существущую дату 


!!МЕТОД date хранит всю информацию в милисекундых, начиная с 01.01.1970 00:00:00

получается методом getTime( )
console.log(date.getTime())

!! Число, полученное методом getTime называется times tamp  

ЕСЛИ ВЗЯТЬ РАНЬШЕ 01.01.1970 00:00:00

date.setFullYear(1965)
console.log(date.getTime())// получим отрицательное число. В этом случае можем отсчитать в обратную сторону сколько осталось месяцев и дней  


!!!!
Если передавать в конструктор Date просто год(1 аргумент), то конструктор посчитает не как год, а как милисекунды и переводят их в дату    


МЕТОДЫ 
Выводят время и дату в виде строки, но уже по отдельности   

let date = new Date(243456) // допустим это 4 июня 1977 


toTimeString
console.log(date.toTimeString()) // 04:03:54 GMT+0300 Москва 
 
toDateString
console.log(date.toDateString()) // Sat Jun 04 1977


МОЖНО СДЕЛАТЬ С УЧЕТОМ ЛОКАЛИЗАЦИИ(МЕСТНОЕ ВРЕМЯ)
метод toLocale
console.log(date.toLocaleDateString('ru')) // 04:03:54 GMT+0300 Москва - можно менять на en и тд  


ФОРМАТ  ISO
console.log(date.toISOString('ru').substr(0,10)) // первые 10 символов - выведет только дату   


МЕТОДЫ Date.now()

console.log(Date.now()) - возвращает количество милисекунд, которое прошло с 01.01.1970  с полуночи до начала вызова данного метода 

Date.parse()
можем передать дату в виде строки 

console.log(Date.parse(22 october 1987)) возвращает количество милисекунд, которое прошло с 01.01.1970  с полуночи до начала вызова данного метода 
 

 



