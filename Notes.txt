Курс Glo-Academy по Javascript.

Урок 3. Динамическая типизация данных в Javascript. Условия, ветвления.

Способы общения человек-машина в 2 стороны:
- Confirm (окно в браузере с кнопками да и отмена)
- Prompt (окно в браузере с полем для ввода и кнопками да и отмена)

Команда Confirm в ответах типа да - дает значение true, нет - false

Команда Prompt блокирует другие действия с сайтом, пока не нажмут на варианты ответа в окне

Тип ответа Prompt всегда будет приходить в виде строки.
Есть вариант ответа по умолчанию, пишется рядом с параметром в скобках, отделен запятой и кавычками

Ответы типа нет получают значение null, сам по себе возвращает строковое значение, но когда его просто нет, то отображается null.


Javascript это язык с динамическим приведением типов данных. 

Если есть 2 параметра, и один из них строка, то:
оператор сложения + => то приводит к строке
оператор вычитание - => то приводит к строке
оператор деление, умножение => то приводит к числу

Операторы сравнения: пример 5 == '5'
нестрогое равенство (==) - приводит к числу и при равенстве выдаст true
строгое равенство (===) сравнивает именно типы, если они разные, то сразу получаем ложь - это неявные преобразвания типов


ЯВНЫЕ ПРЕОБРАЗОВАНИЯ 
Глобальные методы.
Метод string переводит все в строку
Для преобразования в число - метод number:

true = 1
false = 0
undefined = NaN
null = 0
строка, кот может быть приведена к number, переводится в number
строка, кот НЕ может быть приведена к number, переводится в NaN 
обычное число - в число

МЕТОД boolean
Для приведение типов данных к булевому значения 

УНАРНЫЙ ОПЕРАТОР ДВОЙНОГО ОТРИЦАНИЯ !!
Сначала переводит в булевый тип, затем переводит в отрицание, второй оператор (!) возвращает исходное    


ПЕРЕНОС ИЗ ЧИСЛА В СТРОКУ, которое можно перевести в строку 
ставим + перед строкой и кавычками, ставим перед строкой
 console.log(+"10") 

 ПЕРЕНОС ИЗ ЧИСЛА В СТРОКУ, которое нельзя перевести в строку типа 78bwe
если console.log(+"8bwe"), то получим NaN 

ParseInt - пробегает по всей строке и выводит только целые числа. может забрать число начиная только с первых символов 

ParseFloat - чтобы получить дробное число 


 ВЕТВЛЕНИЯ 
 это выполнение набора команд, основываваясь на истиннотси или ложности логического выражения  
 всего 2 ответа - да или нет  

 Оператор SWITCH 
в () - то, что сравниваем
после case - то, с чем сравниваем 
 n = 12

 switch(n){
    case 3: 
        console.log(3);
        case 4: .....
 } 
 После первого удовлетворяющего условиям ответа не останавливается, а показывает подходящие дальше  
 Нужно остановить оператором break внутри каждого кейса функционального блока 
  switch(n){
    case 3: 
        console.log(3);
        break
        case 4: .....
        break
 } 

 Можно задать значение по дефолту, если не подошло ничего из кейса
  switch(n){
    case 3: 
        console.log(3);
        break
        case 4: .....
        break
    default: 
        console.log('Не верно ни одно значение ')
 } 

ГРУППИРОВКА КЕЙСОВ 
 кейсы проверяются на строгое соответствие. Например по типу число - строка. Делаем проверку типа. Например + перед строкой

 Умеет проверять на истину логические выражения  
  switch(true) {
    case  n > 10:
        console.log('n>10');
        break
        case n>=10:
        console.log ('n>=10') 
        break
    default: 
        console.log('Не верно ни одно значение ')
 } 

 Нельзя проверять неравенством сразу с двух сторон типа 5<a<10. Нужны операторы объединения && 5<a && a<10

 ТЕРНАРНЫЙ ОПЕРАТОР 
  Условный (тернарный) оператор - единственный оператор в JavaScript, принимающий три операнда: условие, за которым следует знак вопроса (?), затем выражение, которое выполняется, если условие истинно, сопровождается двоеточием (:), и, наконец, выражение, которое выполняется, если условие ложно. Он часто используется в качестве сокращённого варианта инструкции if...else.

Синтаксис
условие ? выражение1 : выражение2
const age = 16;
let stop = false;

age > 18 ? location.assign("continue.html") : (stop = true);