УРОК 5. Циклы. Рекурсия

РЕКУРСИЯ.
-используется Редко
Рекурсия — это что-то, что описывает само себя.
В «Начале» Нолана есть момент с зеркальным коридором, когда в отражении зеркала видно отражение зеркала, в котором видно отражение зеркала, в котором видно...

Второй пример, чуть более академически правильный — это фрактал. Тот же треугольник Серпинского — это пример рекурсии, потому что часть фигуры — это одновременно вся фигура.


В программировании под рекурсией чаще всего понимают функцию, которая вызывает саму себя.

При решении некоторых задач мы можем обнаружить, что решение можно разбить на несколько простых действий и более простой вариант той же задачи.

Например, при возведении числа в степень мы берём число, умножаем его на себя несколько раз. Эту операцию можно представить в виде:

// 2^5 = 2 * 2 * 2 * 2 * 2
//
// 1 шаг: 2
// 2 шаг: 2 * 2
// 3 шаг: 2 * 2 * 2
// 4 шаг: 2 * 2 * 2 * 2
// 5 шаг: 2 * 2 * 2 * 2 * 2
//
// Какой по счёту шаг —
// столько и умножений.

Скопировать
Но это же можно представить в виде нескольких последовательных умножений на 2:

// 2^5 = ((((2 * 2) * 2) * 2) * 2)
//
// 1 шаг: 2
// 2 шаг: 2 * 2  (результат 1-го шага * 2)
// 3 шаг: 4 * 2  (результат 2-го шага * 2)
// 4 шаг: 8 * 2  (результат 3-го шага * 2)
// 5 шаг: 16 * 2  (результат 4-го шага * 2)
//
// Для получения нового результата
// мы берём предыдущий и умножаем его на 2.

Скопировать
При таком представлении всё возведение в степень — это лишь умножение предыдущего результата на 2:

// 2^n = 2^(n-1) * 2
// Значение степени двойки —
// это предыдущее значение, умноженное на 2.

ПОДРОБНЕЕ: https://doka.guide/js/recursion/

ЦИКЛИЧЕСКИЕ ОПЕРАТОРЫ(3).
1) ЦИКЛ FOR
состоит из 3 параметров(стартовая точка, условие, итерация, повторение цикла) и тела цикла

for(let i=1, i<11, i++){
    console.log ('Картошка №' + i + 'почищена');
}
 
2) ЦИКЛ WHILE
while(potato > 0 ){
    console.log ('Картошка №' + i + 'почищена');
    potato--
}

3) ЦИКЛ DO WHILE
отработает 1 раз и только после этого отработает условие
если вернет true, то проверка будет еще раз и так до тех пор пока условие не будет false 
отработает и снова проверит 

do{
    console.log ('Картошка №' + i + 'почищена');
    potato--
} while (potato >0)

Если хотим пропустить какой-то пункт, то используем:
1) continue

for(let i=1, i<11, i++){
    if(i === 5) continue
    console.log ('Картошка №' + i + 'почищена');
}

2) for(let i=1, i<11, i++){
    if(i !== 5) console.log ('Картошка №' + i + 'почищена');
}

ДЛЯ ПОЛНОЙ ОСТАНОВКИ кода на определенном поинте - break

for(let i=1, i<11, i++){
    if(i === 5) break
    console.log ('Картошка №' + i + 'почищена');
}

